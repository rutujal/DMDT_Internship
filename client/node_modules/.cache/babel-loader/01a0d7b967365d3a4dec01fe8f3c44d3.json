{"ast":null,"code":"import React, { useState, createRef, useRef, useEffect, useCallback, Fragment } from 'react';\nvar imageContainer = {\n  position: 'relative',\n  display: 'inline-block'\n};\nvar imageCanvas = {\n  display: 'none'\n};\nvar captureBtn = {\n  border: '1px solid white',\n  borderRadius: '50%',\n  width: '50px',\n  height: '50px',\n  background: '#f7473587',\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  cursor: 'pointer'\n};\n\nfunction ImageCapture(props) {\n  var onCapture = props.onCapture,\n      onError = props.onError,\n      width = props.width,\n      userMediaConfig = props.userMediaConfig;\n\n  var _useState = useState(false),\n      streaming = _useState[0],\n      setStreaming = _useState[1];\n\n  var playerRef = createRef();\n  var canvasRef = createRef();\n  var tracks = useRef();\n  useEffect(function () {\n    var timeout;\n    navigator.mediaDevices.getUserMedia(userMediaConfig).then(function (stream) {\n      playerRef.current.srcObject = stream;\n      tracks.current = stream.getTracks();\n      timeout = setTimeout(function () {\n        return setStreaming(true);\n      }, 2000);\n    })[\"catch\"](function (error) {\n      if (onError) onError(error);\n    });\n    return function () {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [onError, userMediaConfig]);\n  useEffect(function () {\n    return function () {\n      if (tracks.current) {\n        tracks.current[0].stop();\n      }\n    };\n  }, []);\n  var captureImage = useCallback(function () {\n    var imageWidth = playerRef.current.offsetWidth;\n    var imageHeight = playerRef.current.offsetHeight;\n    var _ref = [imageWidth, imageHeight];\n    canvasRef.current.width = _ref[0];\n    canvasRef.current.height = _ref[1];\n    var context = canvasRef.current.getContext('2d');\n    context.drawImage(playerRef.current, 0, 0, imageWidth, imageHeight);\n\n    if (onCapture) {\n      var webPData = canvasRef.current.toDataURL('image/webp');\n      canvasRef.current.toBlob(function (blob) {\n        onCapture({\n          blob: blob,\n          webP: webPData,\n          file: new File([webPData], new Date().getTime() + \".png\")\n        });\n      });\n    }\n  }, [onCapture, canvasRef, playerRef]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: imageContainer\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: playerRef,\n    autoPlay: true,\n    width: width\n  }), streaming && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: captureBtn,\n    onClick: captureImage\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    style: imageCanvas,\n    ref: canvasRef\n  })));\n}\n\nexport default ImageCapture;","map":{"version":3,"sources":["../src/index.js"],"names":["imageContainer","position","display","imageCanvas","captureBtn","border","borderRadius","width","height","background","top","left","transform","cursor","onCapture","onError","userMediaConfig","props","streaming","setStreaming","useState","playerRef","createRef","canvasRef","tracks","useRef","useEffect","navigator","stream","timeout","setTimeout","clearTimeout","captureImage","useCallback","imageWidth","imageHeight","context","webPData","blob","webP","file"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { createRef, useCallback } from 'react';\n\nconst imageContainer = {\n    position: 'relative',\n    display: 'inline-block'\n};\nconst imageCanvas = {\n    display: 'none'\n};\nconst captureBtn = {\n    border: '1px solid white',\n    borderRadius: '50%',\n    width: '50px',\n    height: '50px',\n    background: '#f7473587',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    cursor: 'pointer'\n}\n\nfunction ImageCapture(props) {\n    const { onCapture, onError, width, userMediaConfig } = props;\n    const [streaming, setStreaming] = useState(false);\n    const playerRef = createRef();\n    const canvasRef = createRef();\n    const tracks = useRef();\n    useEffect(() => {\n        let timeout;\n        navigator.mediaDevices\n            .getUserMedia(userMediaConfig)\n            .then((stream) => {\n                playerRef.current.srcObject = stream;\n                tracks.current = stream.getTracks();\n                timeout = setTimeout(() => setStreaming(true), 2000);\n            }).catch(error => {\n                if (onError) onError(error);\n            });\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [onError, userMediaConfig]);\n\n    useEffect(() => {\n        return () => {\n            // Stop the camera stream\n            if (tracks.current) {\n                tracks.current[0].stop();\n            }\n        };\n    }, []);\n\n    const captureImage = useCallback(() => {\n        const imageWidth = playerRef.current.offsetWidth;\n        const imageHeight = playerRef.current.offsetHeight;\n        [canvasRef.current.width, canvasRef.current.height] = [imageWidth, imageHeight];\n        const context = canvasRef.current.getContext('2d');\n        context.drawImage(playerRef.current, 0, 0, imageWidth, imageHeight);\n        // Trigger the callback function\n        if (onCapture) {\n            const webPData = canvasRef.current.toDataURL('image/webp');\n            canvasRef.current.toBlob((blob) => {\n                onCapture({ blob, webP: webPData, file: new File([webPData], `${new Date().getTime()}.png`) });\n            });\n        }\n    }, [onCapture, canvasRef, playerRef]);\n\n    return (\n        <div style={imageContainer}>\n            <video ref={playerRef} autoPlay width={width}></video>\n            {streaming &&\n                <Fragment>\n                    <div style={captureBtn} onClick={captureImage} />\n                    <canvas style={imageCanvas} ref={canvasRef} />\n                </Fragment>\n            }\n        </div>\n    );\n}\n\nexport default ImageCapture;\n"]},"metadata":{},"sourceType":"module"}